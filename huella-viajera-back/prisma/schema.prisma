// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid()) @db.Uuid
  email     String    @unique
  password  String
  role      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  carer     Carer?
  ownerPet  OwnerPet?
}

model Carer {
  id       String    @id @default(uuid()) @db.Uuid
  name     String
  dni      Int       @unique
  phone    String
  address  String
  city     String
  postcode String
  country  String
  bio      String?
  image    String?
  user     User      @relation(fields: [userId], references: [id])
  userId   String    @unique @db.Uuid
  requests Request[]
  ratings  Rating[]
}

model OwnerPet {
  id       String      @id @default(uuid()) @db.Uuid
  name     String
  phone    String
  dni      Int         @unique
  address  String
  city     String
  postcode String
  country  String
  bio      String?
  image    String?
  user     User        @relation(fields: [userId], references: [id])
  userId   String      @unique @db.Uuid
  pets     Pet[]
  postings Posting[]
  ratings  Rating[]
  photos   PhotoHome[]
}

model PhotoHome {
  id         String    @id @default(uuid()) @db.Uuid
  image      String
  OwnerPet   OwnerPet? @relation(fields: [ownerPetId], references: [id])
  ownerPetId String?   @db.Uuid
}

model Pet {
  id         String   @id @default(uuid()) @db.Uuid
  name       String
  type       String
  breed      String
  age        Int
  weight     Int
  image      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  OwnerPet   OwnerPet @relation(fields: [ownerPetId], references: [id])
  ownerPetId String   @db.Uuid
}

model Rating {
  id          String    @id @default(uuid()) @db.Uuid
  value       Int
  comment     String
  destination String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Carer       Carer?    @relation(fields: [carerId], references: [id])
  carerId     String?   @db.Uuid
  OwnerPet    OwnerPet? @relation(fields: [ownerPetId], references: [id])
  ownerPetId  String?   @db.Uuid
}

model Posting {
  id          String    @id @default(uuid()) @db.Uuid
  title       String
  description String
  initialDate DateTime
  finalDate   DateTime
  status      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  OwnerPet    OwnerPet? @relation(fields: [ownerPetId], references: [id])
  ownerPetId  String?   @db.Uuid
  requests    Request[]
}

model Request {
  id        String   @id @default(uuid()) @db.Uuid
  message   String
  createdAt DateTime @default(now())
  status    String   @default("pending")
  Carer     Carer?   @relation(fields: [carerId], references: [id])
  carerId   String?  @db.Uuid
  Posting   Posting? @relation(fields: [postingId], references: [id])
  postingId String?  @db.Uuid
}
